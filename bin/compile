#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e
echo "Current stack ${STACK} version"

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
#: ${LIBUV_VERSION:="1.8.0"}
: ${CORE_BRANCH:="Sdk"}
: ${CORE_REL_VERSION:="rel-1.0.0"}
: ${CORE_VERSION:="latest"}
: ${CORE_RUNTIME:="Active"}
: ${NODE_VERSION:="6.3.1"}

function print() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function export_env_dir() {
  local env_dir=$1
  #local whitelist_regex=${2:-'(CORE_VERSION|LIBUV_VERSION|PROJECT|BUILD_DEBUG|CORE_BRANCH|CORE_REL_VERSION)$'}
  local whitelist_regex=${2:-'(CORE_VERSION|PROJECT|BUILD_DEBUG|CORE_BRANCH|CORE_REL_VERSION)$'}
  local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

LD_DIR=`cd $(dirname $0); cd ..; pwd`
export_env_dir ${ENV_DIR}

# Create Cache Directory
mkdir -p ${CACHE_DIR}

# Create Source Directory
# If you compiled from build dirctory directly then dnu publish throws error due to directory name
# contains underscore '_'. dnu will not support
SRC_DIR=`mktemp -d`
# Move source code into temporary src dir
(
    shopt -s dotglob
    mv ${BUILD_DIR}/* ${SRC_DIR}
)
print "Build Dir Path: ${SRC_DIR}"

if [[ -n $(find ${SRC_DIR} -type f -iname package.json -o -iname bower.json) ]]
then
	print "Install Node"
	NODE_PATH=`mktemp -d`
	curl https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz -Ls \ | tar xz -C ${NODE_PATH}
	export PATH="${NODE_PATH}/node-v${NODE_VERSION}-linux-x64/bin:${PATH}"
	
	print "Install bower"
	if ! hash bower 2>/dev/null; then
		npm install -g bower
	fi
	
	print "Install gulp"
	if ! hash gulp 2>/dev/null; then
		npm install -g gulp-cli
	fi
fi

#Find project.json
PROJECT_JSON_FILES=$(find ${SRC_DIR}/. -maxdepth 3 -iname "project.json")
printf 'Found %s project.json files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)

#Install DotNet Core
NETCORE_VERSION=$(grep -Po '"'"version"'"\s*:\s*"\K([^"]*)'  ${PROJECT_JSON_FILE} | head -1)
print "${NETCORE_VERSION}"
if [ -z "${NETCORE_VERSION}" ]; then
        CORE_BRANCH="preview"
elif [[ "${NETCORE_VERSION}" != "latest" ]]; then
 	if [[ "${NETCORE_VERSION}" == *"1.0.0"* ]]; then
		CORE_DWLD_URL="https://dotnetcli.blob.core.windows.net/dotnet/preview/Binaries/1.0.0-preview2-003121/dotnet-dev-ubuntu-x64.1.0.0-preview2-003121.tar.gz"	
	elif [[ "${NETCORE_VERSION}" == *"1.0.1"* ]]; then
		CORE_DWLD_URL="https://dotnetcli.blob.core.windows.net/dotnet/preview/Binaries/1.0.0-preview2-003131/dotnet-dev-ubuntu-x64.1.0.0-preview2-003131.tar.gz"
	else
		CORE_DWLD_URL="https://download.microsoft.com/download/8/C/9/8C9182C7-9DCD-40C1-B72A-BEC4C3FC1FC1/dotnet-dev-ubuntu-x64.1.0.0-preview2.1-003155.tar.gz"
		#CORE_DWLD_URL="https://dotnetcli.blob.core.windows.net/dotnet/preview/Binaries/1.0.0-preview2.1-003155/dotnet-dev-ubuntu-x64.1.0.0-preview2.1-003155.tar.gz"
	fi
fi

if [ -z "${CORE_DWLD_URL}" ]; then
        CORE_DWLD_URL="https://dotnetcli.blob.core.windows.net/dotnet/preview/Binaries/Latest/dotnet-dev-ubuntu-x64.${CORE_VERSION}.tar.gz"
	#CORE_DWLD_URL="https://dotnetcli.blob.core.windows.net/dotnet/${CORE_BRANCH}/Binaries/Latest/dotnet-dev-ubuntu-x64.${CORE_VERSION}.tar.gz"
	#CORE_DWLD_URL="https://dotnetcli.blob.core.windows.net/dotnet/${CORE_BRANCH}/${CORE_REL_VERSION}/dotnet-dev-ubuntu-x64.${CORE_VERSION}.tar.gz"
fi

if [ -n "$BUILD_DEBUG" ]; then
	CORE_CONFIG="Debug"
	CORE_ENV="--environment Development"
else
	CORE_CONFIG="Release"
	CORE_ENV=""
fi
	
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
print "Updating apt caches"
apt-get $APT_OPTIONS update | indent

mkdir -p ${BUILD_DIR}/.apt
for DEB in $(ls -1 $LD_DIR/lib/*.deb); do
  if [ $STACK == "cedar-14" ] && [ $(basename $DEB) == "libicu52_52.1-3ubuntu0.6_amd64.deb" ]; then
	#libicu52_52.1-3ubuntu0.6_amd64.deb package not needed for cader-14 
	continue
  fi
  
  print "Installing $(basename $DEB)"
  dpkg -x $DEB ${BUILD_DIR}/.apt/
done

export PATH="${BUILD_DIR}/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="${BUILD_DIR}/.apt/usr/lib/x86_64-linux-gnu:${BUILD_DIR}/.apt/usr/lib/i386-linux-gnu:${BUILD_DIR}/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="${BUILD_DIR}/.apt/usr/lib/x86_64-linux-gnu:${BUILD_DIR}/.apt/usr/lib/i386-linux-gnu:${BUILD_DIR}/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="${BUILD_DIR}/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="${BUILD_DIR}/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:${BUILD_DIR}/.apt/usr/lib/i386-linux-gnu/pkgconfig:${BUILD_DIR}/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LD_DIR/export"

echo "CORE_BRANCH: ${CORE_BRANCH}"
echo "CORE_VERSION: ${CORE_VERSION}"
print "DotNet Core Sdk Package Installation Starts From : ${CORE_DWLD_URL}"
mkdir -p "${BUILD_DIR}/dotnet"
curl ${CORE_DWLD_URL} -Ls | tar xz -C ${BUILD_DIR}/dotnet
ln -s ${BUILD_DIR}/dotnet ${HOME}
export PATH="${HOME}/dotnet:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"
if [ -n "$NODE_PATH" ]; then
	export PATH="${BUILD_DIR}/node_modules/.bin:${PATH}"
fi

print "dotnet version"
dotnet --version

print "dotnet restore all dependencies"
dotnet restore ${PROJECT_JSON_FILE} --no-cache
print "dotnet restore all dependencies completed"

#dotnet pulish using project.json
print "dotnet publish starts."
echo "dotnet publish --output ${BUILD_DIR} --configuration ${CORE_CONFIG} ${PROJECT_JSON_FILE} --runtime ${CORE_RUNTIME}"
dotnet publish --output ${BUILD_DIR} --configuration ${CORE_CONFIG} ${PROJECT_JSON_FILE} --runtime ${CORE_RUNTIME}
print "dotnet publish ended."

PROJECT_NAME=$(grep -Po '"'"outputName"'"\s*:\s*"\K([^"]*)'  ${PROJECT_JSON_FILE})
print "${PROJECT_NAME}.dll has been created."

mkdir -p ${BUILD_DIR}/.profile.d
cat <<EOF >${BUILD_DIR}/.profile.d/000_apt.sh
export PATH="$HOME/dotnet:$HOME/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

print "Procfile setting"
cat <<EOF >${BUILD_DIR}/Procfile
web: dotnet ${HOME}/${PROJECT_NAME}.dll http://0.0.0.0:\$PORT ${CORE_ENV}
EOF
